fun is_some(optional: List, c: char) -> bool {
    optional.len() == 1 && optional.get(0) == c
}

fun peek(input_string: List, i: int) -> List {
    val result = List.new();
    if i < input_string.len() {
        result.push(input_string.get(i));
    }
    result
}

fun parse_digit(digit: char) -> List {
    val result = List.new();

    if digit == '0' {
        result.push(0)
    } else if digit == '1' {
        result.push(1)
    } else if digit == '2' {
        result.push(2)
    } else if digit == '3' {
        result.push(3)
    } else if digit == '4' {
        result.push(4)
    } else if digit == '5' {
        result.push(5)
    } else if digit == '6' {
        result.push(6)
    } else if digit == '7' {
        result.push(7)
    } else if digit == '8' {
        result.push(8)
    } else if digit == '9' {
        result.push(9)
    }

    result 
}

fun parse_num(input_string: List, i_ref: List) -> List {
    val i = i_ref.get(0);

    val maybe_char = input_string.peek(i);
    if maybe_char.len() == 0 {
        return List.new();
    }
    
    val c = maybe_char.get(0);
    val digit = c.parse_digit();
    if digit.len() != 1 {
        return List.new();
    }

    val result = digit.get(0);

    while true {
        i = i + 1;

        maybe_char = input_string.peek(i);
        if digit.len() == 0 {
            i_ref.pop();
            i_ref.push(i);
            val res = List.new();
            res.push(result);
            return res;
        }
        
        c = maybe_char.get(0);
        digit = c.parse_digit();
        if digit.len() != 1 {
            i_ref.pop();
            i_ref.push(i);
            val res = List.new();
            res.push(result);
            return res;
        }

        result = result * 10 + digit.get(0);
    }


    
}

fun parse_mul(input_string: List, i: int) -> int {
    if !input_string.peek(i).is_some('m') {
        return 0;
    }

    if !input_string.peek(i + 1).is_some('u') {
        return 0;
    }

    if !input_string.peek(i + 2).is_some('l') {
        return 0;
    }

    if !input_string.peek(i + 3).is_some('(') {
        return 0;
    }

    val i_ref = List.new();
    i_ref.push(i + 4);
    val n1 = input_string.parse_num(i_ref);
    if n1.len() == 0  {
        return 0;
    }
    i = i_ref.pop();

    if !input_string.peek(i).is_some(',') {
        return 0;
    }

    i_ref.push(i + 1);
    val n2 = input_string.parse_num(i_ref);
    if n2.len() == 0  {
        return 0;
    }
    i = i_ref.pop();

    if !input_string.peek(i).is_some(')') {
        return 0;
    }
    
    n1.get(0) * n2.get(0)
}

fun entertain(input_string: List, entertained: List, i: int) -> bool {
    for j, c in entertained {
        if !input_string.peek(i + j).is_some(c) {
            return false;
        }
    }
    true
}

fun main() -> int {
    val input_string: List = List.from_file("res/aoc/3.txt");
    
    val sum = 0;
    val i = 0;
    val length = input_string.len();
    val enabled = true;
    
    while i < length {
        if input_string.entertain("do()", i) {
            enabled = true;
        }

        if input_string.entertain("don't()", i) {
            enabled = false;
        }

        if enabled {
            sum = sum + parse_mul(input_string, i);
        }

        i = i + 1;
    }
    sum
}