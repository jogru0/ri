import utils;

fun to_dir(move: char) -> List {
    if move == '^' {
        return utils::point(0, -1);
    }

    if move == 'v' {
        return utils::point(0, 1);
    }

    if move == '<' {
        return utils::point(-1, 0);
    }

    if move == '>' {
        return utils::point(1, 0);
    }

    0 / 0
}

fun maybe_add_to_queue(p: List, queue: List, was_in_queue: Dict) {
    if !was_in_queue.has(p) {
        was_in_queue.set_new(p, None);
        queue.push(p);
    }
}

fun do_move(grid: Dict, pos: List, move: char) -> List {
    val dir = move.to_dir();

    val target = utils::add_point(pos, dir);

    val queue = List.new();
    val was_in_queue = Dict.new();
    target.maybe_add_to_queue(queue, was_in_queue);

    val to_move = List.new();

    while queue.len() != 0 {
        val check = queue.pop();
        val c = grid.get(check);

        if c == '#' {
            return pos;
        } else if c == '[' {
            val other = utils::add_point(check, utils::point(1, 0));
            other.maybe_add_to_queue(queue, was_in_queue);

            val next = utils::add_point(check, dir);
            next.maybe_add_to_queue(queue, was_in_queue);

            to_move.push(check);
        } else if c == ']' {
            val other = utils::add_point(check, utils::point(-1, 0));
            other.maybe_add_to_queue(queue, was_in_queue);

            val next = utils::add_point(check, dir);
            next.maybe_add_to_queue(queue, was_in_queue);

            to_move.push(check);
        } else if c != '.' {
            0 / 0
        }
    }

    val next_to_move = to_move;    
    while next_to_move.len() != 0 {
        val to_move_this_iteration = next_to_move;
        next_to_move = List.new();
        
        while to_move_this_iteration.len() != 0 {
            val noow = to_move_this_iteration.pop();
            val neew = utils::add_point(noow, dir);
            
            val noow_c = grid.get(noow);
            val neew_c = grid.get(neew);
            
            if neew_c != '.' {
                next_to_move.push(noow);
            } else {
                grid.update_existing(neew, noow_c);
                grid.update_existing(noow, '.');
            }
        }
    }

    return target;
}

fun extract_pos(grid: Dict) -> List {
    for p in grid.keys() {
        if grid.get(p) == '@' {
            grid.update_existing(p, '.');
            return p;
        }
    }
}

fun score_boxes(grid: Dict) -> int {
    val sum = 0;
    for p in grid.keys() {
        if grid.get(p) == '[' {
            sum += p.get(0) + 100 * p.get(1);
        }
    }
    sum
}

fun main() -> int {
    val input_lines = List.from_file("res/aoc/15.txt").lines();

    val i = 0;
    while input_lines.get(i).len() != 0 {
        i += 1
    };

    val grid_lines = List.new();
    val j = 0;
    while j < i {
        grid_lines.push(input_lines.get(j));
        j += 1;
    }

    val grid = Dict.new();
    val pregrid = grid_lines.utils::parse_grid_lines();
    for key in pregrid.keys() {
        val x = key.get(0);
        val y = key.get(1);
        val c = pregrid.get(key);
        val l = utils::point(2 * x, y);
        val r = utils::point(2 * x + 1, y);
        
        val chars = List.new();
        if c == '@' {
            chars.push('@');
            chars.push('.');
        } else if c == '.' {
            chars.push('.');
            chars.push('.');
        } else if c == '#' {
            chars.push('#');
            chars.push('#');
        } else if c == 'O' {
            chars.push('[');
            chars.push(']');
        } else {
            0 / 0
        }

        grid.set_new(r, chars.pop());
        grid.set_new(l, chars.pop());
    }

    val moves = List.new();
    while i < input_lines.len() {
        for move in input_lines.get(i) {
            moves.push(move);
        }
        
        i += 1;
    }

    val pos = grid.extract_pos();
    
    for move in moves {
        pos = grid.do_move(pos, move);
    }

    grid.score_boxes()
}