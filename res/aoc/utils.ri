fun map(list: List, callable: Callable) -> List {
    val result = List.new();
    for entry in list {
        result.push(callable.invoke(entry))
    }
    result
}


fun extract_all_pos(grid: Dict, c: char) -> List {
    val res = List.new();
    for key in grid.keys() {
        if grid.get(key) == c {
            res.push(key);
        }
    }
    res
}

fun extract_pos(grid: Dict, c: char) -> List {
    val res = grid.extract_all_pos(c);
    
    if res.len () != 1 {
        "did not find unique element".debug();
        c.debug();
        0 / 0
    }

    res.get(0)
}

fun concat(lhs: List, rhs: List) -> List {
    val res = lhs.deep_clone();
    res.concat_inplace(rhs);
    res
}

fun concat_inplace(lhs: List, rhs: List) {
    for c in rhs {
        lhs.push(c);
    }
}

fun parse_int(string: List) -> int {
    string.parse(int)
}

fun max(lhs: int, rhs: int) -> int {
    if lhs < rhs {
        rhs
    } else {
        lhs
    }
}

fun min(lhs: int, rhs: int) -> int {
    if rhs < lhs {
        rhs
    } else {
        lhs
    }
}

fun neighbors4(p: List) -> List {
    val x = p.get(0);
    val y = p.get(1);
    
    val result = List.new();
    result.push(point(x + 1, y));
    result.push(point(x - 1, y));
    result.push(point(x, y + 1));
    result.push(point(x, y - 1));
    result
    
}

fun parse_digit(digit: char) -> List {
    val result = List.new();

    if digit == '0' {
        result.push(0)
    } else if digit == '1' {
        result.push(1)
    } else if digit == '2' {
        result.push(2)
    } else if digit == '3' {
        result.push(3)
    } else if digit == '4' {
        result.push(4)
    } else if digit == '5' {
        result.push(5)
    } else if digit == '6' {
        result.push(6)
    } else if digit == '7' {
        result.push(7)
    } else if digit == '8' {
        result.push(8)
    } else if digit == '9' {
        result.push(9)
    }

    result 
}

fun parse_numbers_in_line(line: List) -> List {
    val result = List.new();

    val i_ref = optional(0);

    val negated = false;
    while true {
        val i = i_ref.unwrap();
        
        val c = line.peek(i);
        if c.len() == 0 {
            return result;
        }

        if c.unwrap() == '-' {
            i_ref= optional(i + 1);
            negated = true;
        } else {
            val num = line.parse_num(i_ref);
            if num.len() == 0 {
                i_ref = optional(i + 1);
            } else {
                if negated {
                    result.push(-num.unwrap());
                } else {
                    result.push(num.unwrap());
                }
            }
            negated = false;
        }
    }
}

fun parse_num(input_string: List, i_ref: List) -> List {
    val i = i_ref.get(0);

    val maybe_char = input_string.peek(i);
    if maybe_char.len() == 0 {
        return List.new();
    }
    
    val c = maybe_char.get(0);
    val digit = c.parse_digit();
    if digit.len() != 1 {
        return List.new();
    }

    val result = digit.get(0);

    while true {
        i += 1;

        maybe_char = input_string.peek(i);
        if maybe_char.len() == 0 {
            i_ref.update_optional(i);
            return optional(result);
        }
        
        digit = maybe_char.get(0).parse_digit();
        if digit.len() != 1 {
            i_ref.update_optional(i);
            return optional(result);
        }

        result = result * 10 + digit.get(0);
    }
}

fun optional(i: any) -> List {
    val result = List.new();
    result.push(i);
    result
}

fun unwrap(opt: List) -> any {
    opt.get(0)
}

fun update_optional(i_ref: List, i: int) -> int {
    val res = i_ref.pop();
    i_ref.push(i);
    res
}

fun peek(input_string: List, i: int) -> List {
    val result = List.new();
    if i < input_string.len() {
        result.push(input_string.get(i));
    }
    result
}

fun set_if_new(dict: Dict, elem: any) {
    if !dict.has(elem) {
        dict.set_new(elem, None);
    }
}

fun split_at(input_string: List, separator: char) -> List {
    val result = List.new();
    val current = List.new();

    for c in input_string {
        if c == separator {
            result.push(current);
            current = List.new();
        } else {
            current.push(c);
        }
    }
    result.push(current);
    result
}

fun insert_edge(graph: Dict, source: int, target: int) {
    if graph.has(source) {
        val targets = graph.get(source);
        targets.push(target);
    } else {
        val targets = List.new();
        targets.push(target);
        graph.set_new(source, targets);
    }

    if !graph.has(target) {
        graph.set_new(target, List.new());
    }
}

fun get_reachable(graph: Dict) -> Dict {
    val reachable = Dict.new();
    for source in graph.keys() {
        for target in graph.get(source) {
            if !reachable.has(target) {
                reachable.set_new(target, None);
            }
        }
    }
    reachable
}

fun topologically_sorted(graph: Dict) -> List {
    graph = graph.deep_clone();

    val result = List.new();

    while graph.keys().len() != 0 {
        val reachable = graph.get_reachable();

        val progress = false;
        for key in graph.keys() {
            if !reachable.has(key) {
                graph.remove(key);
                result.push(key);
                progress = true;
            }
        }

        if !progress {
            return List.new();
        }
    }

    optional(result)
}

fun is_none(list: List) -> bool {
    list.len() == 0
}

fun get_some(list: List) -> any {
    if list.len() != 1 {
        0 / 0
    }

    list.get(0)
}

fun has_cycles(graph: Dict) -> bool {
    graph.topologically_sorted().is_none()
}

fun parse_grid(input_string: List) -> Dict {
    parse_grid_lines(input_string.lines())
}

fun parse_grid_lines(input_lines: List) -> Dict {
    val result = Dict.new();

    for y, line in input_lines {
        for x, c in line {
            val key = point(x, y);
            result.set_new(key, c); 
        }
    }


    result
}

//TODO replace duplicates in old solutions
fun point(x: int, y: int) -> List {
    val result = List.new();
    result.push(x);
    result.push(y);
    result
}

//TODO replace duplicates (add) in old solutions
fun add_point(p: List, q: List) -> List {
    val result = List.new();

    val x = p.get(0) + q.get(0);
    val y = p.get(1) + q.get(1);

    result.push(x);
    result.push(y);

    result
}

fun sub_point(p: List, q: List) -> List {
    val result = List.new();

    val x = p.get(0) - q.get(0);
    val y = p.get(1) - q.get(1);

    result.push(x);
    result.push(y);

    result
}


fun rotate_cw(p: List) -> List {
    val result = List.new();
    result.push(-p.get(1));
    result.push(p.get(0));
    result
}

fun pow(base: int, exp: int) -> int {
    val res = 1;
    while 0 < exp {
        exp -= 1;
        res *= base;
    }
    res
}

fun digits_of(value: int) -> int {
    if value == 0 {
        return 1;
    }
    
    val res = 0;
    while 0 < value {
        value -= value % 10;
        value /= 10;
        res += 1;
    } 
    res
}

fun has_substring_at(super: List, sup: List, at: int) -> bool {
    val sup_size = sup.len();

    if super.len() < sup_size + at {
        return false;
    }

    val j = 0;
    while j < sup_size {
        if super.get(at + j) != sup.get(j) {
            return false;
        }

        j += 1;
    }

    true
}

fun split_at_sub(line: List, split: List) -> List {
    val line_size = line.len();
    val split_size = split.len();

    val next = List.new();
    val result = List.new();
    val i = 0;
    while i < line_size {
        if line.has_substring_at(split, i) {
            i += split_size;
            result.push(next);
            next = List.new();
        } else {
            next.push(line.get(i));
            i += 1;
        }
    }
    result.push(next);
    result
}