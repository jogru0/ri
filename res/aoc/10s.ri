import utils;

fun do_step(reachable_nines: Dict, grid: Dict, now: char, prev: char) {
    for p in grid.keys() {
        if grid.get(p) == now {
            val reachable = Dict.new();
            for n in p.utils::neighbors4() {
                if reachable_nines.has(n) && grid.get(n) == prev {
                    for r in reachable_nines.get(n).keys() {
                        if !reachable.has(r) {
                            reachable.set_new(r, None);
                        }
                    }
                }
            } 
            reachable_nines.set_new(p, reachable);
        }
    }
}

fun main() -> List {
    val input_string = List.from_file("res/aoc/10.txt");
    val grid = input_string.utils::parse_grid();
   
    val reachable_nines = Dict.new();
    for p in grid.keys() {
        if grid.get(p) == '9' {
            val reachable = Dict.new();
            reachable.set_new(p, None);
            reachable_nines.set_new(p, reachable);    
        }
    }

    do_step(reachable_nines, grid, '8', '9');
    do_step(reachable_nines, grid, '7', '8');
    do_step(reachable_nines, grid, '6', '7');
    do_step(reachable_nines, grid, '5', '6');
    do_step(reachable_nines, grid, '4', '5');
    do_step(reachable_nines, grid, '3', '4');
    do_step(reachable_nines, grid, '2', '3');
    do_step(reachable_nines, grid, '1', '2');
    do_step(reachable_nines, grid, '0', '1');
   
    val sum = 0;
    for p in grid.keys() {
        if grid.get(p) == '0' {
            sum += reachable_nines.get(p).keys().len();
        }
    }
    sum.utils::to_string()
}