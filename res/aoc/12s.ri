import utils;

fun parse_int(string: List) -> int {
    string.parse(int)
}

fun get_region(grid: Dict, key: List) -> Dict {
    val identifier = grid.get(key);
    val region = Dict.new();
    val to_check = List.new();
    to_check.push(key);

    while to_check.len() != 0 {
        val k = to_check.pop();
        if (!region.has(k)) && grid.has(k) && grid.get(k) == identifier {
            region.set_new(k, None);
            for n in k.utils::neighbors4() {
                to_check.push(n);
            }
        }
    }

    region
}

fun area(region: Dict) -> int {
    region.keys().len()
}

fun perimeter(region: Dict) -> int {
    val res = 0;
    for key in region.keys() {
        for n in key.utils::neighbors4() {
            if !region.has(n) {
                res += 1;
            }
        }
    }
    res
}


fun main() -> List {
    val grid = List.from_file("res/aoc/12.txt").utils::parse_grid();

    val regions = Dict.new();
    val n_regions = 0; 

    val done_keys = Dict.new();

    for key in grid.keys() {
        if !done_keys.has(key) {
            val region = grid.get_region(key);
            for k in region.keys() {
                done_keys.set_new(k, None);
            }
            regions.set_new(n_regions, region);
            n_regions += 1;
        }
    }

    val sum = 0;
    for r_id in regions.keys() {
        val region = regions.get(r_id);
        sum += region.area() * region.perimeter();
    }
    sum.utils::to_string()
}