import utils;


fun create_state(kp0: List, kp1: List, kp2: List, done: int) -> List {
    val res = List.new();
    res.push(kp0);
    res.push(kp1);
    res.push(kp2);
    res.push(done);
    res
}

fun move_dir(current: List, dir: char, keypad: Dict) -> List {
    val dir_point = if dir == '<' {
        utils::point(-1, 0)
    } else if dir == '>' {
        utils::point(1, 0)
    } else if dir == '^' {
        utils::point(0, -1)
    } else if dir == 'v' {
        utils::point(0, 1)
    } else {
        0 / 0
    };

    val target = utils::add_point(current, dir_point);

    if keypad.has(target) {
        target
    } else {
        current
    }
}

fun apply(state_in: List, action: char, dir_pad: Dict, num_pad: Dict, expected: List) -> List {
    val state = state_in.deep_clone();
   
    if action == 'A' {
        action = dir_pad.get(state.get(0));
        if action == 'A' {
            action = dir_pad.get(state.get(1));
            if action == 'A' {
                action = num_pad.get(state.get(2));
                val next_number_position = state.get(3);
                if next_number_position < expected.len() && expected.get(next_number_position) == action {
                    state.set(3, next_number_position + 1);
                } 
            } else {
                state.set(2, state.get(2).move_dir(action, num_pad));
            }
        } else {
            state.set(1, state.get(1).move_dir(action, dir_pad));
        }    
    } else {
        state.set(0, state.get(0).move_dir(action, dir_pad));
    }

    state
}

fun get_sequence_length(code: List, num_keypad: Dict, dir_keypad: Dict) -> int {
    val initial_state = create_state(utils::point(2, 0), utils::point(2, 0), utils::point(2, 3), 0);
    val code_len = code.len();

    val queue = List.new();
    queue.push(initial_state);

    val done = Dict.new();
    val distance = 0;
    while queue.len() != 0 {
        val todo = queue;
        queue = List.new();

        while todo.len() != 0 {
            val current = todo.pop();
            if !done.has(current) {
                done.set_new(current, None);

                if current.get(3) == code.len() {
                    return distance;
                }

                for k in dir_keypad.keys() {
                    queue.push(current.apply(dir_keypad.get(k), dir_keypad, num_keypad, code));
                }
            }
        }

        distance += 1;
    }
}

fun main() -> int {
    val codes = List.from_file("res/aoc/21.txt").lines();

    val num_keypad = Dict.new();
    num_keypad.set_new(utils::point(0, 0), '7');
    num_keypad.set_new(utils::point(1, 0), '8');
    num_keypad.set_new(utils::point(2, 0), '9');
    num_keypad.set_new(utils::point(0, 1), '4');
    num_keypad.set_new(utils::point(1, 1), '5');
    num_keypad.set_new(utils::point(2, 1), '6');
    num_keypad.set_new(utils::point(0, 2), '1');
    num_keypad.set_new(utils::point(1, 2), '2');
    num_keypad.set_new(utils::point(2, 2), '3');
    num_keypad.set_new(utils::point(1, 3), '0');
    num_keypad.set_new(utils::point(2, 3), 'A');

    val dir_keypad = Dict.new();
    dir_keypad.set_new(utils::point(1, 0), '^');
    dir_keypad.set_new(utils::point(2, 0), 'A');
    dir_keypad.set_new(utils::point(0, 1), '<');
    dir_keypad.set_new(utils::point(1, 1), 'v');
    dir_keypad.set_new(utils::point(2, 1), '>');

    val sum = 0;
    for code in codes {
        sum += code.get_sequence_length(num_keypad, dir_keypad) * code.utils::parse_num(utils::optional(0)).utils::unwrap(); 
    }

    sum
}