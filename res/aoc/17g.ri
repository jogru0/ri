import utils;

fun combo(op: int, a: int, b: int, c: int) -> int {
    if op < 4 {
        op
    } else if op == 4 {
        a
    } else if op == 5 {
        b
    } else {
        c
    }
}

fun verify(program: List, a: int, b: int, c: int) -> bool {
    val program_size = program.len();

    val instruction_ptr = 0;

    val output_size = 0;

    while instruction_ptr < program_size {
        val instruction = program.get(instruction_ptr);
        val op = program.get(instruction_ptr + 1);

        if instruction == 0 {
            val exp = combo(op, a, b, c);
            val divisor = utils::pow(2, exp);
            a = (a - a % divisor) / divisor;
        } else if instruction == 1 {
            b xor= op;
        } else if instruction == 2 {
            b = combo(op, a, b, c) % 8;
        } else if instruction == 3 {
            if a != 0 {
                instruction_ptr = op - 2;
            }
        } else if instruction == 4 {
            b xor= c;
        } else if instruction == 5 {
            if output_size == program_size {
                return false;
            }

            val expected = program.get(output_size);
            if expected != combo(op, a, b, c) % 8 {
                return false;
            }

            output_size += 1
        } else if instruction == 6 {
            val exp = combo(op, a, b, c);
            val divisor = utils::pow(2, exp);
            b = (a - a % divisor) / divisor;
        } else if instruction == 7 {
            val exp = combo(op, a, b, c);
            val divisor = utils::pow(2, exp);
            c = (a - a % divisor) / divisor;
        } else {
            0 / 0
        }

        instruction_ptr += 2;
    }

    output_size == program_size
}

fun main() -> int {
    val input_lines = List.from_file("res/aoc/17.txt").lines();

    val j = utils::optional(12);
    val b = input_lines.get(1).utils::parse_num(j).utils::unwrap();
    
    val k = utils::optional(12);
    val c = input_lines.get(2).utils::parse_num(k).utils::unwrap();
    
    val program = utils::parse_numbers_in_line(input_lines.get(4));

    val a = 108107571134369;
        
    val step = 1;

    while true {
        if verify(program, a, b, c) {
            return a;
        }

        a += step;
    }
}