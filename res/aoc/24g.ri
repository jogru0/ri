import utils;

fun to_binary(x: int) -> List {
    val xx = List.new();
    val i = 0;
    while i < 45 {
        val c = x % 2;
        xx.push(c);
        x -= c;
        x /= 2;
        i += 1;
    }

    if x != 0 {
        x.debug();
        0 / 0;
    }

    xx
}

fun is_eval_correct(circuit: List, x: int, y: int, currents_in: Dict) -> bool {
    val currents = currents_in.deep_clone();
    val correct_values = x.to_binary();
    correct_values.utils::concat_inplace(y.to_binary());
    for i, k in currents.keys() {
        currents.update_existing(k, correct_values.get(i));
    }
    
    val todo = Dict.new();
    for i, ignore in circuit {
        todo.set_new(i, None);
    }

    while todo.len() != 0 {
        val made_progress = false;
        for i in todo.keys() {
            val component = circuit.get(i);
            if currents.has(component.get(0)) && currents.has(component.get(2)) {
                val in1 = currents.get(component.get(0));
                val in2 = currents.get(component.get(2));
                val out_cable = component.get(3);
                val combinator = component.get(1);
                
                val out = if combinator == "XOR" {
                    if in1 == in2 {
                        0
                    } else {
                        1
                    }
                } else if combinator == "OR" {
                    if in1 == 0 && in2 == 0 {
                        0
                    } else {
                        1
                    }
                } else if combinator == "AND" {
                    if in1 != 1 || in2 != 1 {
                        0
                    } else {
                        1
                    }
                } else {
                    combinator.debug();
                    0 / 0
                };

                currents.set_new(out_cable, out);
                todo.remove(i);
                made_progress = true;
            }
        }

        if !made_progress {
            return false;
        }
    }

    val sum = 0;
    for cable in currents.keys() {
        if cable.get(0) == 'z' && currents.get(cable) == 1 {
            val num = utils::parse_num(cable, utils::optional(1)).utils::unwrap();
            sum += utils::pow(2, num);
        }
    }

    sum == x + y
}

fun try_to_get_to_work(
    circuit: List,
    x: int,
    y: int,
    currents_in: Dict
) -> List {
    if circuit.is_eval_correct(x, y, currents_in) {
        "expected the unexpected".debug();
        0 / 0;
    }

    val results = List.new();
    val best = circuit.score(currents_in);

    val i = 0;
    while i < circuit.len() {
        val j = 0;
        while j < i {
            val swap = utils::point(i, j);
            
            circuit.apply_swap(swap);
            
            if circuit.is_eval_correct(x, y, currents_in) {
                val sc = circuit.score(currents_in);
                if sc < best {
                    best = sc;
                    results = List.new();
                    results.push(swap);
                } else if sc == best {
                    results.push(swap);
                }
            }
            
            circuit.apply_swap(swap);

            j += 1;
        }
        
        i += 1;
    }

    results
}

fun score(circuit: List, currents: Dict) -> int {
    val sc = 0;
    val p = 0;

    val all_bits = utils::pow(2, 45) - 1;

    while p < 45 {
        val pth_bit = utils::pow(2, p);

        val all_other_bit = xor(pth_bit, all_bits);

        if !circuit.is_eval_correct(pth_bit, 0, currents) {
            sc += 1;
        }

        if !circuit.is_eval_correct(pth_bit, all_other_bit, currents) {
            sc += 1;
        }

        if !circuit.is_eval_correct(pth_bit, all_bits, currents) {
            sc += 1;
        }

        if !circuit.is_eval_correct(all_bits, all_other_bit, currents) {
            sc += 1;
        }

        if !circuit.is_eval_correct(0, pth_bit, currents) {
            sc += 1;
        }

        if !circuit.is_eval_correct(pth_bit, pth_bit, currents) {
            sc += 1;
        }

        if !circuit.is_eval_correct(pth_bit - 1, pth_bit - 1, currents) {
            sc += 1;
        }

        p += 1;
    }

    sc
}

fun apply_swap(circuit: List, swap: List) {
    val i = swap.get(0);
    val j = swap.get(1);

    val tmp = circuit.get(i).get(3);
    circuit.get(i).set(3, circuit.get(j).get(3));
    circuit.get(j).set(3, tmp);
}

fun do_unique_best_swap(circuit: List, x: int, y: int, currents_in: Dict) -> List {
    val swaps = circuit.try_to_get_to_work(x, y, currents_in);
    if swaps.len() != 1 {
        0 / 0
    }

    val swap = swaps.utils::unwrap();
    circuit.apply_swap(swap);
    swap
}

fun main() -> List {
    val il = List.from_file("res/aoc/24.txt").lines().utils::split_at("");
    val input_current_lines = il.get(0);
    val circuit_lines = il.get(1);


    val currents = Dict.new();
    for icl in input_current_lines {
        val name_value = icl.utils::split_at_sub(": ");
        currents.set_new(name_value.get(0), -1);
    }

    val circuit = List.new();
    for cl in circuit_lines {
        val elements = cl.utils::split_at(' ');
        val component = List.new();
        component.push(elements.get(0));
        component.push(elements.get(1));
        component.push(elements.get(2));
        component.push(elements.get(4));
        circuit.push(component);
    }

    val swaps = List.new();
    swaps.push(circuit.do_unique_best_swap(0, 268435456, currents));
    swaps.push(circuit.do_unique_best_swap(0, 274877906944, currents));
    swaps.push(circuit.do_unique_best_swap(16777216, 16777216, currents));
    swaps.push(circuit.do_unique_best_swap(1024, 1024, currents));
  
    val result = List.new();
    for swap in swaps {
        result.push(circuit.get(swap.get(0)).get(3));
        result.push(circuit.get(swap.get(1)).get(3));
    }

    result.sort();
    result.utils::join(",")
}