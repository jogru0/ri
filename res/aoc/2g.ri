
fun parse_numbers(s: List) -> List {
    val number_strings: List = s.split_whitespace();

    val numbers: List = List.new();
    val i: int = 0;
    val length: int = number_strings.len();
    while i < length {
        numbers.push(number_strings.get(i).parse(int));
        i = i + 1;
    }
    numbers
}

fun is_valid_report(report: List) -> bool {
    val length = report.len();
    if length < 2 {
        return true;
    }

    val last:int = report.get(0);
    val found_inc = false;
    val found_dec = false;

    val i = 1;
    while i < length {
        val n: int = report.get(i);

        val diff = n - last;
        val adiff = diff.abs();

        if adiff < 1 { 
            return false;
        }

        if 3 < adiff { 
            return false;
        }

        if diff < 0 {
            found_dec = true;
        } else {
            found_inc = true;
        }
        
        last = n;
        
        i = i+1;
    }

    if found_dec {
        if found_inc {
            return false;
        }
    }

    true 
}


fun is_valid_report_without(report: List, ex: int) -> bool {
    val length = report.len();
    if length < 3 {
        return true;
    }

    val i: int = if ex == 0 {
        1
    } else {
        0
    };

    val last: int = report.get(i);
    
    val found_inc = false;
    val found_dec = false;

    i = i + 1;

    if ex + 1 == length {
        length = ex;
    }

    while i < length {
        if i == ex {
            i = i + 1;
        }

        val n: int = report.get(i);

        val diff = n - last;
        val adiff = diff.abs();

        if adiff < 1 { 
            return false;
        }

        if 3 < adiff { 
            return false;
        }

        if diff < 0 {
            found_dec = true;
        } else {
            found_inc = true;
        }
        
        last = n;
        
        i = i+1;
    }

    if found_dec {
        if found_inc {
            return false;
        }
    }

    true 
}


fun main() -> int {
    val input_string: List = List.from_file("res/aoc/2.txt");

    val report_strings: List = input_string.lines();

    val i = 0;
    val length = report_strings.len();
    val reports = List.new();
    while i < length {
        reports.push(parse_numbers(report_strings.get(i)));
        i = i + 1;
    }

    i = 0;
    val sum = 0;
    while i < length {
        if is_valid_report_generalized(reports.get(i)) {
            sum = sum + 1;
        }
        i = i + 1;
    }



    sum

}

fun is_valid_report_generalized(report: List) -> bool {
    if is_valid_report(report) {
        return true;
    }

    val i = 0;
    val length = report.len();

    while i < length {
        if is_valid_report_without(report, i) {
        return true;
    }   

        i = i + 1;
    }

    false
}